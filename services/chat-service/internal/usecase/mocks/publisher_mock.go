// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/user/GolandProjects/forum/services/chat-service/internal/usecase/message.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "chat-service/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessagePublisher is a mock of MessagePublisher interface.
type MockMessagePublisher struct {
	ctrl     *gomock.Controller
	recorder *MockMessagePublisherMockRecorder
}

// MockMessagePublisherMockRecorder is the mock recorder for MockMessagePublisher.
type MockMessagePublisherMockRecorder struct {
	mock *MockMessagePublisher
}

// NewMockMessagePublisher creates a new mock instance.
func NewMockMessagePublisher(ctrl *gomock.Controller) *MockMessagePublisher {
	mock := &MockMessagePublisher{ctrl: ctrl}
	mock.recorder = &MockMessagePublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagePublisher) EXPECT() *MockMessagePublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m_2 *MockMessagePublisher) Publish(topicID int64, m *entity.Message) {
	m_2.ctrl.T.Helper()
	m_2.ctrl.Call(m_2, "Publish", topicID, m)
}

// Publish indicates an expected call of Publish.
func (mr *MockMessagePublisherMockRecorder) Publish(topicID, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMessagePublisher)(nil).Publish), topicID, m)
}
