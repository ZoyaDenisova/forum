basePath: /
definitions:
  http.ErrorResponse:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  http.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  http.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  http.SessionResponse:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      user_agent:
        type: string
    type: object
  http.TokenResponse:
    properties:
      access_token:
        type: string
    type: object
  http.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    type: object
  http.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the authentication service API.
  title: Auth API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Log in user; returns accessToken in JSON and refreshToken in HttpOnly
        cookie
      parameters:
      - description: Login payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: refresh_token cookie
              type: string
          schema:
            $ref: '#/definitions/http.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Authenticate user
      tags:
      - Auth
  /auth/me:
    get:
      description: Return profile of authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new accessToken and refreshToken; reads refreshToken from
        HttpOnly cookie
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: refresh_token cookie
              type: string
          schema:
            $ref: '#/definitions/http.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Refresh tokens
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Register payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Register new user
      tags:
      - Auth
  /auth/session:
    delete:
      description: Log out current session by revoking refreshToken from cookie
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Revoke current session
      tags:
      - Auth
  /auth/sessions:
    delete:
      description: Log out all sessions for the current user
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Revoke all sessions
      tags:
      - Auth
    get:
      description: Returns all active sessions for the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/http.SessionResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user sessions
      tags:
      - Auth
  /auth/user:
    patch:
      consumes:
      - application/json
      description: Updates only the specified fields (name, email, password) for the
        current user
      parameters:
      - description: Поля для обновления
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Partially update own profile
      tags:
      - Auth
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
